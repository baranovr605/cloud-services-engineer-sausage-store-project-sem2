---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: {{ .Values.mongodb.image }}
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
{{ toYaml .Values.mongodb.resources | indent 12 }}
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.mongodb.storage }}
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_DATABASE: {{ .Values.mongodb.env.MONGO_INITDB_DATABASE }}
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongo-init
  annotations:
    helm.sh/hook: "post-install"
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: mongo-init
    spec:
      containers:
        - name: mongo-init
          image: {{ .Values.mongodb.image }}
          resources:
{{ toYaml .Values.mongodb.mongodbInit.resources | indent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              until mongosh --host mongodb --port 27017 -u root -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "db.adminCommand('ping')"; do
                echo "Waiting for MongoDB to be ready...";
                sleep 5;
              done
              mongosh --host mongodb --port 27017 --username {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }} --password $MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin <<EOF
              use {{ .Values.mongodb.env.MONGO_INITDB_DATABASE }};
              db.createUser({
                user: "{{ .Values.mongodb.user.name }}",
                pwd: "{{ .Values.mongodb.user.password }}",
                roles: [{ role: "readWrite", db: "{{ .Values.mongodb.env.MONGO_INITDB_DATABASE }}" }]
              });
              EOF
          env:
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mongodb-conf
                  key: MONGO_INITDB_ROOT_PASSWORD
      restartPolicy: OnFailure
